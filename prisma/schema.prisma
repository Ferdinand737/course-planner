datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  isAdmin Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password    Password?
  coursePlans CoursePlan[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

enum DegreeType {
  BA
  BSc
}
model Degree {
  id         String     @id @default(cuid())
  name       String
  degreeType DegreeType
  discipline String

  requirements Requirement[]
  CoursePlan   CoursePlan[]
}


enum RequirementType {
  AT_LEAST
}
model Requirement {
  id              String          @id @default(cuid())
  constraintType  RequirementType @default(AT_LEAST)
  credits         Int
  year            Int
  programSpecific Boolean         @default(false)
  courses         Course[]        @relation("CourseRequirements")

  degree   Degree @relation(fields: [degreeId], references: [id])
  degreeId String
}

model CoursePlan {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  numTerms  Int      @default(16)
  degree    Degree   @relation(fields: [degreeId], references: [id])
  degreeId  String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  plannedCourses PlannedCourse[]
}

model PlannedCourse {
  id   String @id @default(cuid())
  term Int

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  coursePlan   CoursePlan @relation(fields: [coursePlanId], references: [id])
  coursePlanId String
}

model Course {
  id          String  @id @default(cuid())
  code        String  @unique
  name        String
  description String?

  winterTerm1 Boolean @default(false)
  winterTerm2 Boolean @default(false)
  summerTerm1 Boolean @default(false)
  summerTerm2 Boolean @default(false)

  durationTerms Int     @default(1)
  credits       Float   @default(3)
  isHonours     Boolean @default(false)

  requirements Requirement[] @relation("CourseRequirements")

  plannedCourses PlannedCourse[]

  equivalentCourses Course[] @relation("EquivalentCourses")
  equivalentTo      Course[] @relation("EquivalentCourses")

  coRequisiteCourses Course[] @relation("CoRequisites")
  coRequisiteOf      Course[] @relation("CoRequisites")

  excludedCourses Course[] @relation("ExcludedCourses")
  excludedBy      Course[] @relation("ExcludedCourses")

  preRequisites Json @default("{}")
}
