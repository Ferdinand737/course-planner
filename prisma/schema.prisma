datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  isAdmin Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  coursePlans CoursePlan[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model CoursePlan {
  id    String @id @default(cuid())
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  numTerms Int @default(16)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  plannedCourses PlannedCourse[]
}

model PlannedCourse {
  id    String @id @default(cuid())
  term  Int

  course Course @relation(fields: [courseId], references: [id])
  courseId String

  coursePlan CoursePlan @relation(fields: [coursePlanId], references: [id])
  coursePlanId String
}

model Course {
  id              String        @id @default(cuid())
  code            String
  name            String
  description     String?

  winterTerm1     Boolean       @default(false)
  winterTerm2     Boolean       @default(false)
  summerTerm1     Boolean       @default(false)
  summerTerm2     Boolean       @default(false)

  durationTerms   Int           @default(1)
  credits         Int           @default(3)
  isHonours       Boolean       @default(false)

  equivalentCourses Course[] @relation("EquivalentCourses")
  equivalentTo      Course[] @relation("EquivalentCourses")

  excludedCourses Course[] @relation("ExcludedCourses")
  excludedBy      Course[] @relation("ExcludedCourses")

  plannedCourses  PlannedCourse[]

 // Link to prerequisite groups instead of individual prerequisites
  prerequisiteGroups PrerequisiteGroup[] @relation("CoursePrerequisiteGroups")

  preRequisiteFor CoursePrerequisite[]
}

model PrerequisiteGroup {
  id              String              @id @default(cuid())
  courseId        String?             // Nullable if this is a nested group not directly associated with a course
  course          Course?             @relation(fields: [courseId], references: [id], name: "CoursePrerequisiteGroups")
  type            PrerequisiteGroupType
  prerequisites   CoursePrerequisite[]
  childGroups     PrerequisiteGroup[] @relation("ParentChild")
  parentGroup     PrerequisiteGroup?  @relation("ParentChild", fields: [parentGroupId], references: [id])
  parentGroupId   String?

  // Additional fields can be added to support "n of" conditions, like minRequired
  minRequired     Int?                // For "n of" conditions, specifies the minimum number of prerequisites that must be met
}

enum PrerequisiteGroupType {
  AND
  OR
  N_OF // Represents "n of the following" conditions
}

model CoursePrerequisite {
  id            String            @id @default(cuid())
  groupId       String
  group         PrerequisiteGroup @relation(fields: [groupId], references: [id])
  type          PrerequisiteType
  value         String            // For a course, this could be the course code; for other types, the appropriate value

  // if type is COURSE, this field is required
  course Course? @relation(fields: [courseId], references: [id])
  courseId String?
}

enum PrerequisiteType {
  COURSE
  YEAR
  CREDITS
  DEPARTMENT_PERMISSION
}