datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  isAdmin Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password    Password?
  coursePlans CoursePlan[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model IngestedFile {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  filePath String
  name String
  ingested Boolean @default(false)
  numNewCourses Int @default(0)
}

enum DegreeType {
  BSc
  BA
}

model Degree {
  id String @id @default(cuid())

  degreeType      DegreeType
  specializations Specialization[] @relation("DegreeSpecializations")

  CoursePlan CoursePlan[]
}

enum SpecializationType {
  MAJOR
  MINOR
  HONOURS
}

model Specialization {
  id String @id @default(cuid())

  name String

  specializationType SpecializationType
  discipline         String

  requirements Requirement[]

  degree Degree[] @relation("DegreeSpecializations")
}

enum RequirementType {
  AT_LEAST
}

model Requirement {
  id              String          @id @default(cuid())
  constraintType  RequirementType @default(AT_LEAST)

  // Credits is used to find how many courses in the alternatives are needed to satisfy the requirement
  // For example if alternatives is [MATH101, MATH103, MATH123] each with 3 credits and credits is 6, then 2 courses are needed
  credits         Int
  alternativeQuery String @db.LongText

  plannedCourses PlannedCourse[]

  year            Int
  programSpecific Boolean         @default(false)

  specialization   Specialization? @relation(fields: [specializationId], references: [id])
  specializationId String?
}

model CoursePlan {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  numTerms  Int      @default(16)

  degree   Degree @relation(fields: [degreeId], references: [id])
  degreeId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  plannedCourses PlannedCourse[]
}

enum ElectiveType {
  ELEC
  CHOICE
}
model PlannedCourse {
  // PlannedCourse represents a course that has been added to a course plan

  id   String @id @default(cuid())
  term Int

  requirement Requirement @relation(fields: [requirementId], references: [id])
  requirementId String

  isElective Boolean @default(false)
  electiveType ElectiveType?

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  coursePlan   CoursePlan @relation(fields: [coursePlanId], references: [id])
  coursePlanId String
}

enum Faculty {
  SCI
  ART
  OTHER
}

model Course {
  id          String  @id @default(cuid())
  year        Int // Indicates the most recent version of the course that has been ingested
  code        String  @unique
  name        String
  description String? @db.LongText

  // There are special courses that are used as placeholders, these courses can be found in /data/electiveTypes.csv
  isElectivePlaceholder  Boolean @default(false)

  winterTerm1 Boolean @default(false)
  winterTerm2 Boolean @default(false)
  summerTerm1 Boolean @default(false)
  summerTerm2 Boolean @default(false)
  durationTerms Int     @default(1)
  credits       Float   @default(3)
  isHonours     Boolean @default(false)
  faculty Faculty
  preRequisiteString String? @db.LongText

  plannedCourses PlannedCourse[]

  equivalentCourses Course[] @relation("EquivalentCourses")
  equivalentTo      Course[] @relation("EquivalentCourses")

  coRequisiteCourses Course[] @relation("CoRequisites")
  coRequisiteOf      Course[] @relation("CoRequisites")
  
  excludedCourses Course[] @relation("ExcludedCourses")
  excludedBy      Course[] @relation("ExcludedCourses")

  preRequisites Json          @default("{}")
}
